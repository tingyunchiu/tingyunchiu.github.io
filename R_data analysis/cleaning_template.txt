ibrary("readxl")
library("writexl")
library("tidyverse")
library("dplyr")
library("tidyr")
library(ggplot2)

# R show message
message(uid)

# working directory to save data, files
file = paste('D:/your path/', file name, '.xlsx', sep="") 
# change '.xlsx' to '.csv' or '.rds'

# check if data exist
file.exists(file)

# Data import
df <- read_xlsx(file, col_names = TRUE, rowNames = TRUE, na="NA") # the first row of data will be used as column names, and the first column of data will be used as row names
df <- read.csv(file, header = T, row.names = 1) # the first row of data will be used as column names, and the first column of data will be used as row names
options(stringsAsFactors = F) # to prevent R from converting columns that are detected to be character/strings to be factor variables
# import RDS file
df <- readRDS(file)

# import multiple data with same file name in a folder
# set working directory to the folder that containes all the files you want to import
wd = 'D:/NHRI/your path/'
setwd(wd)
# list all the files in the folder, only file names match the pattern (something.rds in this case) will be included
temp = list.files(wd, pattern="*.rds")
# open all the files
all <- lapply(temp, readRDS)

# save data
saveRDS(df, file)

# create new dataframe with variable x and y
df <- df.frame(
  x = c("臺大醫院",  "中山大附設", "仁愛聯合", "臺北榮總"),  
  y = c(109, 105, 63, 63)
  )

# select first row all column
df[1,]
#select first column all rows
df[,1]

# set value of column "A" as missing
df$A[1] <- NA

# add new row to df
df <- rbind(df, new row)

# add row index as a variable
df$row<-as.numeric(rownames(df))

# this returns the number of coulmn in df
length(df) 
# the number of df
nrow(df)
length(df$A)

# assign column names of df
colnames(df) <- c()

# arrange df by A, B, then delete C
df <- df %>%  arrange(A) %>%  arrange(B) %>% select(C)

# check data
summary(df) # tells you stats report of your variables and if how many missing values in each variables
# remember to see if your data makes sense, ie. variable x should only be 0,1,2 but you get 3
# check missing value
is.na(df)
# Check if all rows in a variable are all missing 
length(unique(df$A)) == 1
# delete duplicated rows
df <- df[!duplicated(df),]
# find levels of a variable
unique(df$A)

# select df based on column value match
df[which(df$A == "1"),]
# select df based on column value that doesnt match
# note: if df column A does not have any rows contain the value of "1", then the selected df would has zero rows. 
# so always check if there the length of column A == "1" before slicing
 if(length(which(df$A == "1")) > 0) {
    df <- df[-which(df$A == "1"),]
  }

# select if value of column A could be found in another data(1,2,3)
df$A[data$A %in% c(1, 2, 3)]

# deal with time difference
# first change time to posixct
df <- df %>% mutate(A = as.POSIXct(strptime(A, "%Y-%m-%d %H:%M:%S")))
difftime(df$A[i+1], df$A[ifile.exists(f)], units = "secs")

# select part of a string
substr(as.character(df$A), where to start, where to end)

# add 平均使用by app by 人 by天 as ave_appuse to df
df <- df %>% group_by(Userid,date) %>%  mutate(ave_appuse = mean(ActionTime))
# n() to count for cases in each level in a variable, mean to get the mean of a variable
df %>% group_by(time) %>% summarise(freq = n(), ave_next_break = mean(next_break, na.rm = TRUE))

# useful functions
lapply
mutate

# ggplot
ggplot(df, aes(Year, Rating, colour = age_gp)) + 
  geom_line(size=1.5) +
  labs(title="C. Men's Professional Players (Excluded World Champions)",
       x ="Year", y = "Performance") +
  #scale_color_manual(values=
   #                    c('#66CC99','#33FF99','#FFCC33','#FFFF99','#66CCFF'))+
  theme(legend.title = element_blank()) +
  theme(axis.line = element_line(colour = "black"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank()) +
  scale_x_continuous(breaks = seq(1980, 2021, by = 5)) +
  scale_y_continuous(breaks = seq(2400, 4000, by = 100))

  


